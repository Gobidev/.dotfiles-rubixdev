#!/bin/sh

alias tmux='tmux -2'
alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -v'
alias ip='ip -c'
if command -v exa > /dev/null; then
    alias l='exa -lahg --icons --octal-permissions --git'
    alias ll=l
fi

updaterc () {
    pwd="$(pwd)"
    cd ~/.dotfiles || {
        echo 'The .dotfiles folder should be at ~/.dotfiles to auto update'
        return 2
    }
    git pull
    ./install.sh
    cd "$pwd" || return 2
    # Reload shell
    exec "$SHELL"
}
editrc () {
    [ -d "$HOME/.dotfiles" ] || {
        echo 'No .dotfiles folder at ~/.dotfiles'
        return 2
    }
    editor="$EDITOR"
    [ -n "$EDITOR" ] || editor=vim
    $editor ~/.dotfiles/.zshrc
}

upd () {
    pwd="$(pwd)"
    if command -v apt > /dev/null; then
        apdate
    else
        paru -Syu
    fi
    updaterc
    for plugin in "$ZSH_CUSTOM"/plugins/*; do
        cd "$plugin" || return 1
        git pull
    done
    cd "$pwd" || return 2
    # shellcheck disable=SC2046
    cargo install $(cargo install --list | grep -E '^[a-z0-9_-]+ v[0-9.]+:$' | cut -f1 -d' ')
}

command -v xclip >/dev/null && { alias setclip='xclip -selection c'; alias getclip='xclip -selection c -o'; }
command -v wl-copy >/dev/null && { alias setclip='wl-copy'; alias getclip='wl-paste'; }

alias root='sudo su -'
alias con='ssh contabo'
alias poof='poweroff'
alias pubip='curl ipinfo.io/ip'
alias ipa='ip -br a'
alias apdate='sudo apt update && sudo apt upgrade && sudo apt autoremove && sudo apt autoclean'
alias occ='sudo docker exec -u www-data -it nextcloud php occ'
alias sctl='sudo systemctl'
alias sr='screen -r'
alias sls='screen -ls'

_paru_bin="$(command -v paru)"
paru () {
    (
        unset CARGO_TARGET_DIR
        unset GOPATH
        $_paru_bin "$@"
    )
}

godotvim () {
    [ "$(basename "$(pwd)")" = "src" ] || cd src || return 1
    [ -e godothost ] && rm godothost > /dev/null
    nvim --listen godothost .
    [ -e godothost ] && rm godothost > /dev/null
}

rewg () {
    systemctl is-active wg-quick@wg0 > /dev/null && {
        sudo systemctl restart wg-quick@wg0
        return 0
    }
    systemctl is-active wg-quick@wg1 > /dev/null && {
        sudo systemctl restart wg-quick@wg1
        return 0
    }
    echo "No known wg service is running"
    return 3
}
alias wg0='sudo systemctl stop wg-quick@wg1; sudo systemctl start wg-quick@wg0'
alias wg1='sudo systemctl stop wg-quick@wg0; sudo systemctl start wg-quick@wg1'
alias stopwg='sudo systemctl stop wg-quick@wg0; sudo systemctl stop wg-quick@wg1'
alias startwg='sudo systemctl start wg-quick@wg0; sudo systemctl start wg-quick@wg1'

cheat () { curl -s "cheat.sh/$1" | less; }
colors () {
    zsh -c '
    for i in {0..255}; do
        print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'"'"'\n'"'"'}
    done'
}

postclip () { curl -sSL https://clip.rubixdev.de/index.php -F data="$1" -o /dev/null; }
alias fetchclip='curl -sSL https://clip.rubixdev.de/clipboard.txt'

findfont () {
    [ -n "$1" ] || {
        echo "Please specify a symbol to search for"
        return 1
    }
    python -c "import os

fonts = []

def add_fonts(directory):
    if not os.path.isdir(directory): return
    for root,dirs,files in os.walk(directory):
        for file in files:
            if file.endswith('.ttf'): fonts.append(os.path.join(root,file))

add_fonts('/usr/share/fonts/')
add_fonts('$HOME/.local/share/fonts/')
add_fonts('$HOME/.fonts/')


from fontTools.ttLib import TTFont

def char_in_font(unicode_char, font):
    for cmap in font['cmap'].tables:
        if cmap.isUnicode():
            if ord(unicode_char) in cmap.cmap:
                return True
    return False

def test(char):
    for fontpath in fonts:
        font = TTFont(fontpath)   # specify the path to the font in question
        if char_in_font(char, font):
            print(char + ' in ' + fontpath)

test('$1')"
}
